diff --git a/CMakeLists.txt b/CMakeLists.txt
index 2a51ec3..7d4ad33 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,3 +1,11 @@
+set(AFL_CC_COMPILER LLVM)
+
+set(CMAKE_C_COMPILER /AFLplusplus/afl-clang-fast)
+set(CMAKE_CXX_COMPILER /AFLplusplus/afl-clang-fast++)
+
+set(ENV{CC} /AFLplusplus/afl-clang-fast)
+set(ENV{CXX} /AFLplusplus/afl-clang-fast++)
+
 cmake_minimum_required(VERSION 3.13)
 project(example-grpc LANGUAGES CXX)
 
diff --git a/server/src/main.cpp b/server/src/main.cpp
index 9b33084..4f3dc69 100644
--- a/server/src/main.cpp
+++ b/server/src/main.cpp
@@ -4,6 +4,7 @@
 #include <grpc/grpc.h>
 #include <grpcpp/server_builder.h>
 
+#include <thread>
 #include <iostream>
 
 class AddressBookService final : public expcmake::AddressBook::Service {
@@ -11,11 +12,13 @@ class AddressBookService final : public expcmake::AddressBook::Service {
         virtual ::grpc::Status GetAddress(::grpc::ServerContext* context, const ::expcmake::NameQuerry* request, ::expcmake::Address* response)
         {
             std::cout << "Server: GetAddress for \"" << request->name() << "\"." << std::endl;
-
+            if (request->name().empty()) {
+	         std::abort();
+            }
             response->set_name("Peter Peterson");
             response->set_zip("12345");
             response->set_country("Superland");
-            
+
             return grpc::Status::OK;
         }
 };
@@ -23,13 +26,29 @@ class AddressBookService final : public expcmake::AddressBook::Service {
 int main(int argc, char* argv[])
 {
     grpc::ServerBuilder builder;
+
     builder.AddListeningPort("0.0.0.0:50051", grpc::InsecureServerCredentials());
 
     AddressBookService my_service;
     builder.RegisterService(&my_service);
 
     std::unique_ptr<grpc::Server> server(builder.BuildAndStart());
-    server->Wait();
-    
+    std::cout << "server starting..." << std::endl;
+
+    // Start server in a separate thread
+    std::thread server_thread([&]() {
+        server->Wait();
+    });
+
+    std::this_thread::sleep_for(std::chrono::milliseconds(300));
+
+    // Shutdown server in 300ms
+    server->Shutdown();
+    std::cout << "server is shutting down..." << std::endl;
+
+    // Join the server thread
+    server_thread.join();
+    std::cout << "server stopped" << std::endl;
+
     return 0;
 }
